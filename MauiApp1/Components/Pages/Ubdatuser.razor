@page "/edit-user"
@layout Layoutminu
@inject UserService userService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
<h3>✏️ تعديل بيانات الموظف حسب الرقم</h3>

<RadzenTemplateForm Data="@user" TItem="User" Submit="@UpdateUser" Style="max-width: 500px; margin-top: 20px;">
    <RadzenNumeric TValue="int" @bind-Value="searchNumber" Placeholder="🔢 رقم الموظف" Style="width: 100%;" />

    <div class="d-flex gap-2 mt-3">
        <RadzenButton Icon="search" Text="جلب البيانات" Click="@FetchUser" Style="width: 49%;" />
        <RadzenButton Icon="delete" Text="حذف" Click="@DeleteUser" ButtonType="ButtonType.Button" Style="width: 49%; background-color: #c82333; color: white;" />
    </div>

    @if (userFound)
    {
        <RadzenTextBox @bind-Value="user.name" Placeholder="👤 الاسم" Style="width: 100%;" Class="mt-3" />
        <RadzenPassword @bind-Value="user.password" Placeholder="🔐 كلمة السر" Style="width: 100%;" Class="mt-3" />

     

        <RadzenButton Text="💾 تحديث البيانات" Icon="save" ButtonType="ButtonType.Submit" Class="mt-3" Style="width: 100%;" />
    }
    else if (searched)
    {
        <p class="text-danger mt-3">❌ لم يتم العثور على موظف بهذا الرقم</p>
    }
</RadzenTemplateForm>

@code {
    private int searchNumber;
    private User user = new();
    private bool userFound = false;
    private bool searched = false;

    protected override async Task OnInitializedAsync()
    {
        await userService.InitAsync();
    }

    private async Task FetchUser()
    {
        user = await userService.GetUserByNumberAsync(searchNumber) ?? new();
        userFound = user.id != null;
        searched = true;
    }

    private async Task UpdateUser()
    {
        if (user.id == null)
        {
            await DialogService.Alert("⚠️ لم يتم تحميل بيانات الموظف لتحديثها");
            return;
        }

        await userService.UpdateUserAsync(user);
        await DialogService.Alert("✅ تم تحديث بيانات الموظف بنجاح");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task DeleteUser()
    {
        var userToDelete = await userService.GetUserByNumberAsync(searchNumber);

        if (userToDelete?.id != null)
        {
            await userService.DeleteUserAsync(userToDelete);
            user = new();
            userFound = false;
            searched = true;
            await DialogService.Alert("🗑️ تم حذف الموظف بنجاح");
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            userFound = false;
            searched = true;
            await DialogService.Alert("❌ لم يتم العثور على الموظف");
        }
    }
}