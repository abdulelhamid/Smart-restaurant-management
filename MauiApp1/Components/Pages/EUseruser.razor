@page "/view-useradmin"
@layout Layoutminu
@using MauiApp1
@inject UserService userService

<h3 style="text-align:center;">🔐 قائمة الموطفين</h3>

<div style="overflow-x:auto; padding:20px;">
    <RadzenDataGrid Data="@users" TItem="User" RowSelect="@EditSelectedUser"
                    AllowPaging="true" PageSize="10" ColumnWidth="100px"
                    Style="background-color:#fff7e6; border:1px solid orange;">
        <Columns>
            <RadzenDataGridColumn TItem="User" Property="id" Title="🆔 ID" />
            <RadzenDataGridColumn TItem="User" Property="name" Title="👤 الاسم" />
            <RadzenDataGridColumn TItem="User" Property="number" Title="📞 الهاتف" />
            <RadzenDataGridColumn TItem="User" Title="🔓 نوع الصلاحية">
                <Template Context="user">
                    @if (user.adminall == true)
                    {
                        <span style="color:green;">كاملة</span>
                    }
                    else if (user.adminsampil == true)
                    {
                        <span style="color:orange;">جزئية</span>
                    }
                    else
                    {
                        <span style="color:gray;">غير إداري</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Title="⚙️ إجراءات">
                <Template Context="user">
                    <RadzenButton Icon="edit" Text="تعديل"
                                  Style="margin-right:5px; background-color:orange; color:white;"
                                  Click="@(() => StartEdit(user))" />
                    <RadzenButton Icon="delete" Text="حذف"
                                  Style="background-color:#c82333; color:white;"
                                  Click="@(() => DeleteUser(user))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@if (selectedUser.id != null)
{
    <div style="width:100%; max-width:500px; margin:auto; padding:20px;">
        <RadzenTemplateForm Data="@selectedUser" TItem="User" Submit="@ConfirmUpdate">
            <RadzenTextBox @bind-Value="selectedUser.name" Placeholder="👤 الاسم"
                           Style="width:100%; margin-top:10px;" />
            <RadzenPassword @bind-Value="selectedUser.password" Placeholder="🔐 كلمة السر"
                            Style="width:100%; margin-top:10px;" />
            <RadzenNumeric @bind-Value="selectedUser.number" Placeholder="📞 رقم الهاتف"
                           Style="width:100%; margin-top:10px;" />

            <div style="margin-top:10px;">
                <RadzenCheckBox @bind-Value="selectedUser.adminsampil" />
                <label style="margin-left:8px;">📌 صلاحية جزئية</label>
            </div>
            <div style="margin-top:10px;">
                <RadzenCheckBox @bind-Value="selectedUser.adminall" />
                <label style="margin-left:8px;">🔐 صلاحية كاملة</label>
            </div>

            <RadzenButton Text="💾 حفظ التعديلات" Icon="save" ButtonType="ButtonType.Submit"
                          Style="width:100%; margin-top:10px; background-color:green; color:white;" />
        </RadzenTemplateForm>

        @if (!string.IsNullOrEmpty(errorMsg))
        {
            <p style="color:red;">@errorMsg</p>
        }
        @if (!string.IsNullOrEmpty(successMsg))
        {
            <p style="color:green;">@successMsg</p>
        }
    </div>
}

@code {
    List<User> users = new();
    User selectedUser = new();
    string errorMsg, successMsg;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await userService.InitAsync();
            var all = await userService.GetUsersAsync();
            users = all.Where(u => u.adminall == true || u.adminsampil == true).ToList();
        }
        catch (Exception ex)
        {
            errorMsg = $"⚠️ خطأ أثناء التحميل: {ex.Message}";
        }
    }

    void StartEdit(User user)
    {
        selectedUser = new User
        {
            id = user.id,
            name = user.name,
            password = user.password,
            number = user.number,
            adminsampil = user.adminsampil,
            adminall = user.adminall
        };

        errorMsg = successMsg = string.Empty;
    }

    async Task ConfirmUpdate()
    {
        if (selectedUser.id == null)
        {
            errorMsg = "🚫 لم يتم تحديد مستخدم للتعديل";
            return;
        }

        await userService.UpdateUserAsync(selectedUser);
        successMsg = "✅ تم تعديل البيانات بنجاح";
        errorMsg = string.Empty;
        selectedUser = new();
        await Reload();
    }

    async Task DeleteUser(User user)
    {
        if (user.id == null)
        {
            errorMsg = "🚫 لا يمكن حذف مستخدم غير معروف";
            return;
        }

        await userService.DeleteUserAsync(user);
        successMsg = "🧹 تم حذف المستخدم";
        errorMsg = string.Empty;
        selectedUser = new();
        await Reload();
    }

    async Task Reload()
    {
        var all = await userService.GetUsersAsync();
        users = all.Where(u => u.adminall == true || u.adminsampil == true).ToList();
    }

    void EditSelectedUser(User user) => StartEdit(user);
}